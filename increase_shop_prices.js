#!/usr/bin/env node
/**
 * Script ƒë·ªÉ tƒÉng gi√° t·∫•t c·∫£ items trong EconomyShopGUI
 * S·ª≠ d·ª•ng: node increase_shop_prices.js <multiplier>
 * V√≠ d·ª•: node increase_shop_prices.js 5  # TƒÉng gi√° x5 l·∫ßn
 * ho·∫∑c: npm run increase-shop 5
 */

const fs = require('fs-extra');
const path = require('path');
const yaml = require('js-yaml');
const { glob } = require('glob');

/**
 * TƒÉng gi√° buy/sell trong file YAML
 * @param {string} filePath - ƒê∆∞·ªùng d·∫´n file shop
 * @param {number} multiplier - H·ªá s·ªë nh√¢n
 */
async function increasePrices(filePath, multiplier) {
    try {
        // ƒê·ªçc file YAML
        const fileContent = await fs.readFile(filePath, 'utf8');
        const data = yaml.load(fileContent);
        
        if (!data || !data.pages) {
            console.log(`‚ö†Ô∏è  File kh√¥ng h·ª£p l·ªá: ${path.basename(filePath)}`);
            return;
        }
        
        let modified = false;
        let itemCount = 0;
        
        // Duy·ªát qua c√°c trang
        for (const [pageName, pageData] of Object.entries(data.pages)) {
            if (pageData.items) {
                for (const [itemId, itemData] of Object.entries(pageData.items)) {
                    // TƒÉng gi√° mua
                    if (typeof itemData.buy === 'number') {
                        const oldBuy = itemData.buy;
                        itemData.buy = Math.round((oldBuy * multiplier) * 100) / 100; // Round to 2 decimal places
                        modified = true;
                    }
                    
                    // TƒÉng gi√° b√°n (kh√¥ng tƒÉng gi√° √¢m)
                    if (typeof itemData.sell === 'number' && itemData.sell > 0) {
                        const oldSell = itemData.sell;
                        itemData.sell = Math.round((oldSell * multiplier) * 100) / 100; // Round to 2 decimal places
                        modified = true;
                    }
                    
                    if (modified) itemCount++;
                }
            }
        }
        
        if (modified) {
            // Ghi l·∫°i file v·ªõi format ƒë·∫πp
            const yamlStr = yaml.dump(data, {
                defaultFlowStyle: false,
                lineWidth: -1,
                noRefs: true,
                sortKeys: false
            });
            
            await fs.writeFile(filePath, yamlStr, 'utf8');
            console.log(`‚úÖ Updated: ${path.basename(filePath)} (${itemCount} items)`);
        } else {
            console.log(`‚ÑπÔ∏è  No prices found: ${path.basename(filePath)}`);
        }
        
    } catch (error) {
        console.error(`‚ùå Error processing ${path.basename(filePath)}:`, error.message);
    }
}

/**
 * Main function
 */
async function main() {
    try {
        // L·∫•y multiplier t·ª´ command line
        const args = process.argv.slice(2);
        if (args.length !== 1) {
            console.log('‚ùå Usage: node increase_shop_prices.js <multiplier>');
            console.log('üìù Example: node increase_shop_prices.js 5');
            console.log('üìù Or: npm run increase-shop 5');
            process.exit(1);
        }
        
        const multiplier = parseFloat(args[0]);
        if (isNaN(multiplier) || multiplier <= 0) {
            console.log('‚ùå Multiplier must be a positive number!');
            process.exit(1);
        }
        
        console.log(`üîß Increasing shop prices by ${multiplier}x...`);
        
        // T√¨m t·∫•t c·∫£ file shop
        const shopDir = path.join(__dirname, 'EconomyShopGUI', 'shops');
        const pattern = path.join(shopDir, '*.yml');
        const shopFiles = await glob(pattern);
        
        console.log(`üìÅ Found ${shopFiles.length} shop files`);
        
        if (shopFiles.length === 0) {
            console.log('‚ùå No shop files found!');
            console.log(`üìÇ Looking in: ${shopDir}`);
            return;
        }
        
        // X·ª≠ l√Ω t·ª´ng file
        let totalUpdated = 0;
        for (const shopFile of shopFiles) {
            await increasePrices(shopFile, multiplier);
            totalUpdated++;
        }
        
        console.log(`\n‚úÖ Done! ${totalUpdated} shop files processed`);
        console.log(`üìà All shop prices increased by ${multiplier}x`);
        console.log('üîÑ Remember to restart your server to apply changes!');
        
    } catch (error) {
        console.error('‚ùå Fatal error:', error);
        process.exit(1);
    }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    main();
}

module.exports = { increasePrices };
